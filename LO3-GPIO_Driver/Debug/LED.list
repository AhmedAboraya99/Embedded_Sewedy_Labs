
LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000320  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b4  080004bc  000014bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b4  080004b4  000014bc  2**0
                  CONTENTS
  4 .ARM          00000000  080004b4  080004b4  000014bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004b4  080004bc  000014bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b4  080004b4  000014b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004b8  080004b8  000014b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004bc  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004bc  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000475  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000245  00000000  00000000  00001961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00001ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005e  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001006  00000000  00000000  00001c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000717  00000000  00000000  00002c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003efa  00000000  00000000  000033b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000072ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000015c  00000000  00000000  000072f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0000744c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800049c 	.word	0x0800049c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800049c 	.word	0x0800049c

080001d4 <GPIO_EnableClock>:
#include"STM32F401xx.h"
#include "GPIO_STM32F401xx.h"

//enable clock with RCC
void GPIO_EnableClock(GPIOx_TypeDef * pGPIOx)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	if(pGPIOx == GPIOA)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4a12      	ldr	r2, [pc, #72]	@ (8000228 <GPIO_EnableClock+0x54>)
 80001e0:	4293      	cmp	r3, r2
 80001e2:	d106      	bne.n	80001f2 <GPIO_EnableClock+0x1e>
	{
		//register to enable clock for gpio
			RCC->RCC_AHB1ENR |= (1<<0);
 80001e4:	4b11      	ldr	r3, [pc, #68]	@ (800022c <GPIO_EnableClock+0x58>)
 80001e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e8:	4a10      	ldr	r2, [pc, #64]	@ (800022c <GPIO_EnableClock+0x58>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	else if(pGPIOx == GPIOC)
	{
		RCC->RCC_AHB1ENR |= (1<<2);
	}
}
 80001f0:	e014      	b.n	800021c <GPIO_EnableClock+0x48>
	else if(pGPIOx == GPIOB)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000230 <GPIO_EnableClock+0x5c>)
 80001f6:	4293      	cmp	r3, r2
 80001f8:	d106      	bne.n	8000208 <GPIO_EnableClock+0x34>
		RCC->RCC_AHB1ENR |= (1<<1);
 80001fa:	4b0c      	ldr	r3, [pc, #48]	@ (800022c <GPIO_EnableClock+0x58>)
 80001fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fe:	4a0b      	ldr	r2, [pc, #44]	@ (800022c <GPIO_EnableClock+0x58>)
 8000200:	f043 0302 	orr.w	r3, r3, #2
 8000204:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000206:	e009      	b.n	800021c <GPIO_EnableClock+0x48>
	else if(pGPIOx == GPIOC)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4a0a      	ldr	r2, [pc, #40]	@ (8000234 <GPIO_EnableClock+0x60>)
 800020c:	4293      	cmp	r3, r2
 800020e:	d105      	bne.n	800021c <GPIO_EnableClock+0x48>
		RCC->RCC_AHB1ENR |= (1<<2);
 8000210:	4b06      	ldr	r3, [pc, #24]	@ (800022c <GPIO_EnableClock+0x58>)
 8000212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000214:	4a05      	ldr	r2, [pc, #20]	@ (800022c <GPIO_EnableClock+0x58>)
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	40020000 	.word	0x40020000
 800022c:	40023800 	.word	0x40023800
 8000230:	40020400 	.word	0x40020400
 8000234:	40020800 	.word	0x40020800

08000238 <GPIO_InitPin>:

//Initialization
void GPIO_InitPin(GPIOx_TypeDef * pGPIOx,int pinNumber ,int mode, int speed, int outputType, int InputType)
{
 8000238:	b480      	push	{r7}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	60f8      	str	r0, [r7, #12]
 8000240:	60b9      	str	r1, [r7, #8]
 8000242:	607a      	str	r2, [r7, #4]
 8000244:	603b      	str	r3, [r7, #0]
	//select mode : input or output
	pGPIOx->MODER &= ~(0b11 <<(pinNumber*2)) ;//clear to adjust
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	005b      	lsls	r3, r3, #1
 800024e:	2103      	movs	r1, #3
 8000250:	fa01 f303 	lsl.w	r3, r1, r3
 8000254:	43db      	mvns	r3, r3
 8000256:	401a      	ands	r2, r3
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	601a      	str	r2, [r3, #0]
	pGPIOx->MODER |= (mode<<(pinNumber*2));//write the value
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	005b      	lsls	r3, r3, #1
 8000264:	6879      	ldr	r1, [r7, #4]
 8000266:	fa01 f303 	lsl.w	r3, r1, r3
 800026a:	431a      	orrs	r2, r3
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	601a      	str	r2, [r3, #0]

	//select speed
	pGPIOx->OSPEEDER &= ~(0b11 <<(pinNumber*2));
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	689a      	ldr	r2, [r3, #8]
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	005b      	lsls	r3, r3, #1
 8000278:	2103      	movs	r1, #3
 800027a:	fa01 f303 	lsl.w	r3, r1, r3
 800027e:	43db      	mvns	r3, r3
 8000280:	401a      	ands	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	609a      	str	r2, [r3, #8]
	pGPIOx->OSPEEDER |= (speed<<(pinNumber*2));
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	689a      	ldr	r2, [r3, #8]
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	005b      	lsls	r3, r3, #1
 800028e:	6839      	ldr	r1, [r7, #0]
 8000290:	fa01 f303 	lsl.w	r3, r1, r3
 8000294:	431a      	orrs	r2, r3
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	609a      	str	r2, [r3, #8]

	//select output type
	if(mode == 0b01)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d113      	bne.n	80002c8 <GPIO_InitPin+0x90>
	{
		pGPIOx->OTYPER &= ~(0b1<<pinNumber);
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685a      	ldr	r2, [r3, #4]
 80002a4:	2101      	movs	r1, #1
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ac:	43db      	mvns	r3, r3
 80002ae:	401a      	ands	r2, r3
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	605a      	str	r2, [r3, #4]
		pGPIOx->OTYPER |= (outputType<<pinNumber);
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	685a      	ldr	r2, [r3, #4]
 80002b8:	69b9      	ldr	r1, [r7, #24]
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	fa01 f303 	lsl.w	r3, r1, r3
 80002c0:	431a      	orrs	r2, r3
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	605a      	str	r2, [r3, #4]
	}else if(mode == 0)//input type
	{
		pGPIOx->PUPDR &= ~(0b11 <<(pinNumber*2));
		pGPIOx->PUPDR |= (InputType<<(pinNumber*2));
	}
}
 80002c6:	e017      	b.n	80002f8 <GPIO_InitPin+0xc0>
	}else if(mode == 0)//input type
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d114      	bne.n	80002f8 <GPIO_InitPin+0xc0>
		pGPIOx->PUPDR &= ~(0b11 <<(pinNumber*2));
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	68da      	ldr	r2, [r3, #12]
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	2103      	movs	r1, #3
 80002d8:	fa01 f303 	lsl.w	r3, r1, r3
 80002dc:	43db      	mvns	r3, r3
 80002de:	401a      	ands	r2, r3
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	60da      	str	r2, [r3, #12]
		pGPIOx->PUPDR |= (InputType<<(pinNumber*2));
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	68da      	ldr	r2, [r3, #12]
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	005b      	lsls	r3, r3, #1
 80002ec:	69f9      	ldr	r1, [r7, #28]
 80002ee:	fa01 f303 	lsl.w	r3, r1, r3
 80002f2:	431a      	orrs	r2, r3
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	60da      	str	r2, [r3, #12]
}
 80002f8:	bf00      	nop
 80002fa:	3714      	adds	r7, #20
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <GPIO_ReadPin>:
//Read
int GPIO_ReadPin(GPIOx_TypeDef * pGPIOx,int pinNumber)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]
	return (pGPIOx->IDR>>pinNumber)&1;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	691a      	ldr	r2, [r3, #16]
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	fa42 f303 	asr.w	r3, r2, r3
 8000318:	f003 0301 	and.w	r3, r3, #1
}
 800031c:	4618      	mov	r0, r3
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <GPIO_WritePin>:
//Write
void GPIO_WritePin(GPIOx_TypeDef * pGPIOx,int pinNumber, int pinValue)
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	60f8      	str	r0, [r7, #12]
 8000330:	60b9      	str	r1, [r7, #8]
 8000332:	607a      	str	r2, [r7, #4]
	pGPIOx->ODR &= ~(0b1<<pinNumber);
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	695a      	ldr	r2, [r3, #20]
 8000338:	2101      	movs	r1, #1
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	fa01 f303 	lsl.w	r3, r1, r3
 8000340:	43db      	mvns	r3, r3
 8000342:	401a      	ands	r2, r3
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	615a      	str	r2, [r3, #20]
	pGPIOx->ODR |= (pinValue<<pinNumber);
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	695a      	ldr	r2, [r3, #20]
 800034c:	6879      	ldr	r1, [r7, #4]
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	fa01 f303 	lsl.w	r3, r1, r3
 8000354:	431a      	orrs	r2, r3
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	615a      	str	r2, [r3, #20]

}
 800035a:	bf00      	nop
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr

08000366 <delay_ms>:
#include <stdbool.h>
#include "STM32F401xx.h"
#include "GPIO_STM32F401xx.h"

void delay_ms(int delay)
{
 8000366:	b480      	push	{r7}
 8000368:	b085      	sub	sp, #20
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
	for(int i= 0; i< delay * 1000; i++)
 800036e:	2300      	movs	r3, #0
 8000370:	60fb      	str	r3, [r7, #12]
 8000372:	e002      	b.n	800037a <delay_ms+0x14>
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	3301      	adds	r3, #1
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000380:	fb02 f303 	mul.w	r3, r2, r3
 8000384:	68fa      	ldr	r2, [r7, #12]
 8000386:	429a      	cmp	r2, r3
 8000388:	dbf4      	blt.n	8000374 <delay_ms+0xe>
	{

	}
}
 800038a:	bf00      	nop
 800038c:	bf00      	nop
 800038e:	3714      	adds	r7, #20
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr

08000398 <main>:

int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af02      	add	r7, sp, #8
	//enable clock for RCC : GPIOA
	GPIO_EnableClock(GPIOA);
 800039e:	4817      	ldr	r0, [pc, #92]	@ (80003fc <main+0x64>)
 80003a0:	f7ff ff18 	bl	80001d4 <GPIO_EnableClock>

	//for led pin 2
	//define mode : output
	GPIO_InitPin(GPIOA,2,0b01, 0, 0, 0);
 80003a4:	2300      	movs	r3, #0
 80003a6:	9301      	str	r3, [sp, #4]
 80003a8:	2300      	movs	r3, #0
 80003aa:	9300      	str	r3, [sp, #0]
 80003ac:	2300      	movs	r3, #0
 80003ae:	2201      	movs	r2, #1
 80003b0:	2102      	movs	r1, #2
 80003b2:	4812      	ldr	r0, [pc, #72]	@ (80003fc <main+0x64>)
 80003b4:	f7ff ff40 	bl	8000238 <GPIO_InitPin>
	//input mode : switch pin 4
	GPIO_InitPin(GPIOA,4,0b00, 0, 0, 0b10);
 80003b8:	2302      	movs	r3, #2
 80003ba:	9301      	str	r3, [sp, #4]
 80003bc:	2300      	movs	r3, #0
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	2300      	movs	r3, #0
 80003c2:	2200      	movs	r2, #0
 80003c4:	2104      	movs	r1, #4
 80003c6:	480d      	ldr	r0, [pc, #52]	@ (80003fc <main+0x64>)
 80003c8:	f7ff ff36 	bl	8000238 <GPIO_InitPin>


    /* Loop forever */
	for(;;)
	{
		int switch_read = GPIO_ReadPin(GPIOA, 4);
 80003cc:	2104      	movs	r1, #4
 80003ce:	480b      	ldr	r0, [pc, #44]	@ (80003fc <main+0x64>)
 80003d0:	f7ff ff98 	bl	8000304 <GPIO_ReadPin>
 80003d4:	6078      	str	r0, [r7, #4]
		delay_ms(50); // Simple debounce delay
 80003d6:	2032      	movs	r0, #50	@ 0x32
 80003d8:	f7ff ffc5 	bl	8000366 <delay_ms>
		if(switch_read == 1)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d105      	bne.n	80003ee <main+0x56>
		{

			GPIO_WritePin(GPIOA, 2, 1);
 80003e2:	2201      	movs	r2, #1
 80003e4:	2102      	movs	r1, #2
 80003e6:	4805      	ldr	r0, [pc, #20]	@ (80003fc <main+0x64>)
 80003e8:	f7ff ff9e 	bl	8000328 <GPIO_WritePin>
 80003ec:	e7ee      	b.n	80003cc <main+0x34>

		}else
		{
			GPIO_WritePin(GPIOA, 2, 0);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2102      	movs	r1, #2
 80003f2:	4802      	ldr	r0, [pc, #8]	@ (80003fc <main+0x64>)
 80003f4:	f7ff ff98 	bl	8000328 <GPIO_WritePin>
	{
 80003f8:	e7e8      	b.n	80003cc <main+0x34>
 80003fa:	bf00      	nop
 80003fc:	40020000 	.word	0x40020000

08000400 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000400:	480d      	ldr	r0, [pc, #52]	@ (8000438 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000402:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000404:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000408:	480c      	ldr	r0, [pc, #48]	@ (800043c <LoopForever+0x6>)
  ldr r1, =_edata
 800040a:	490d      	ldr	r1, [pc, #52]	@ (8000440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800040c:	4a0d      	ldr	r2, [pc, #52]	@ (8000444 <LoopForever+0xe>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000410:	e002      	b.n	8000418 <LoopCopyDataInit>

08000412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000416:	3304      	adds	r3, #4

08000418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800041c:	d3f9      	bcc.n	8000412 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041e:	4a0a      	ldr	r2, [pc, #40]	@ (8000448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000420:	4c0a      	ldr	r4, [pc, #40]	@ (800044c <LoopForever+0x16>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000424:	e001      	b.n	800042a <LoopFillZerobss>

08000426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000428:	3204      	adds	r2, #4

0800042a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800042c:	d3fb      	bcc.n	8000426 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800042e:	f000 f811 	bl	8000454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000432:	f7ff ffb1 	bl	8000398 <main>

08000436 <LoopForever>:

LoopForever:
  b LoopForever
 8000436:	e7fe      	b.n	8000436 <LoopForever>
  ldr   r0, =_estack
 8000438:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800043c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000440:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000444:	080004bc 	.word	0x080004bc
  ldr r2, =_sbss
 8000448:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800044c:	2000001c 	.word	0x2000001c

08000450 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000450:	e7fe      	b.n	8000450 <ADC_IRQHandler>
	...

08000454 <__libc_init_array>:
 8000454:	b570      	push	{r4, r5, r6, lr}
 8000456:	4d0d      	ldr	r5, [pc, #52]	@ (800048c <__libc_init_array+0x38>)
 8000458:	4c0d      	ldr	r4, [pc, #52]	@ (8000490 <__libc_init_array+0x3c>)
 800045a:	1b64      	subs	r4, r4, r5
 800045c:	10a4      	asrs	r4, r4, #2
 800045e:	2600      	movs	r6, #0
 8000460:	42a6      	cmp	r6, r4
 8000462:	d109      	bne.n	8000478 <__libc_init_array+0x24>
 8000464:	4d0b      	ldr	r5, [pc, #44]	@ (8000494 <__libc_init_array+0x40>)
 8000466:	4c0c      	ldr	r4, [pc, #48]	@ (8000498 <__libc_init_array+0x44>)
 8000468:	f000 f818 	bl	800049c <_init>
 800046c:	1b64      	subs	r4, r4, r5
 800046e:	10a4      	asrs	r4, r4, #2
 8000470:	2600      	movs	r6, #0
 8000472:	42a6      	cmp	r6, r4
 8000474:	d105      	bne.n	8000482 <__libc_init_array+0x2e>
 8000476:	bd70      	pop	{r4, r5, r6, pc}
 8000478:	f855 3b04 	ldr.w	r3, [r5], #4
 800047c:	4798      	blx	r3
 800047e:	3601      	adds	r6, #1
 8000480:	e7ee      	b.n	8000460 <__libc_init_array+0xc>
 8000482:	f855 3b04 	ldr.w	r3, [r5], #4
 8000486:	4798      	blx	r3
 8000488:	3601      	adds	r6, #1
 800048a:	e7f2      	b.n	8000472 <__libc_init_array+0x1e>
 800048c:	080004b4 	.word	0x080004b4
 8000490:	080004b4 	.word	0x080004b4
 8000494:	080004b4 	.word	0x080004b4
 8000498:	080004b8 	.word	0x080004b8

0800049c <_init>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	bf00      	nop
 80004a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a2:	bc08      	pop	{r3}
 80004a4:	469e      	mov	lr, r3
 80004a6:	4770      	bx	lr

080004a8 <_fini>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	bf00      	nop
 80004ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ae:	bc08      	pop	{r3}
 80004b0:	469e      	mov	lr, r3
 80004b2:	4770      	bx	lr
